// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Carros.Model
{
    public partial class EMPRESACARROSContext : DbContext
    {
        public EMPRESACARROSContext()
        {
        }

        public EMPRESACARROSContext(DbContextOptions<EMPRESACARROSContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Carros> Carros { get; set; }
        public virtual DbSet<Clientes> Clientes { get; set; }
        public virtual DbSet<Concessionarias> Concessionarias { get; set; }
        public virtual DbSet<Contas> Contas { get; set; }
        public virtual DbSet<Funcionarios> Funcionarios { get; set; }
        public virtual DbSet<Vendas> Vendas { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=DESKTOP-UHSE27B\\SQLSERVER;Initial Catalog=EMPRESACARROS;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Carros>(entity =>
            {
                entity.HasKey(e => e.IdCarro)
                    .HasName("PK__CARROS__405417C758A87FA1");

                entity.ToTable("CARROS");

                entity.Property(e => e.IdCarro).HasColumnName("Id_Carro");

                entity.Property(e => e.ModeloCarro)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Clientes>(entity =>
            {
                entity.HasKey(e => e.IdCliente)
                    .HasName("PK__CLIENTES__3DD0A8CBA7DD5F56");

                entity.ToTable("CLIENTES");

                entity.HasIndex(e => e.Cpf, "UQ__CLIENTES__C1F89731CE7A99ED")
                    .IsUnique();

                entity.Property(e => e.IdCliente).HasColumnName("Id_Cliente");

                entity.Property(e => e.Cpf)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("CPF");

                entity.Property(e => e.NomeCliente)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Concessionarias>(entity =>
            {
                entity.HasKey(e => e.IdConcessionaria)
                    .HasName("PK__CONCESSI__FCFA54719C36E623");

                entity.ToTable("CONCESSIONARIAS");

                entity.Property(e => e.IdConcessionaria).HasColumnName("Id_Concessionaria");

                entity.Property(e => e.Cidade)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Gerente)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.NomeConcessionaria)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Contas>(entity =>
            {
                entity.HasKey(e => e.Usuario)
                    .HasName("PK__CONTAS__E3237CF6DF9EC063");

                entity.ToTable("CONTAS");

                entity.Property(e => e.Usuario)
                    .HasMaxLength(150)
                    .IsUnicode(false);

                entity.Property(e => e.Senha)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Funcionarios>(entity =>
            {
                entity.HasKey(e => e.IdFuncionario)
                    .HasName("PK__FUNCIONA__8888ED0328C59512");

                entity.ToTable("FUNCIONARIOS");

                entity.HasIndex(e => e.Cpf, "UQ__FUNCIONA__C1F89731DED4CC5B")
                    .IsUnique();

                entity.Property(e => e.IdFuncionario).HasColumnName("Id_Funcionario");

                entity.Property(e => e.Cargo)
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .IsFixedLength();

                entity.Property(e => e.Cpf)
                    .IsRequired()
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("CPF");

                entity.Property(e => e.IdConcessionaria).HasColumnName("Id_Concessionaria");

                entity.Property(e => e.NomeFuncionario)
                    .IsRequired()
                    .HasMaxLength(150)
                    .IsUnicode(false)
                    .IsFixedLength();
            });

            modelBuilder.Entity<Vendas>(entity =>
            {
                entity.HasKey(e => e.IdVenda)
                    .HasName("PK__VENDAS__B3C86881A00D5D43");

                entity.ToTable("VENDAS");

                entity.Property(e => e.IdVenda).HasColumnName("Id_Venda");

                entity.Property(e => e.IdCarro).HasColumnName("Id_Carro");

                entity.Property(e => e.IdCliente).HasColumnName("Id_Cliente");

                entity.Property(e => e.IdConcessionaria).HasColumnName("Id_Concessionaria");

                entity.Property(e => e.IdFuncionario).HasColumnName("Id_Funcionario");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}